---
- name: Add tags to all tasks
  tags:
    - iris
    - tuned
    - hugepages
  block:
    - name: Get the name of the correct package
      ansible.builtin.find:
        paths: "{{ iris_extracted_install_files_path }}/other/linuxconfig"
        patterns: 'epic-config-*.el{{ ansible_distribution_major_version }}.noarch.rpm'
      register: rpm

    - name: Fail if no RPM package found or if more than one found
      ansible.builtin.fail:
        msg: >-
          No RPM package found matching 'epic-config-*.el{{ ansible_distribution_major_version }}.noarch.rpm'
          in {{ iris_extracted_install_files_path }}/other/linuxconfig
      when: rpm.matched != 1

    - name: Install epic-config package
      ansible.builtin.dnf:
        name: "{{ rpm.files[0].path }}"
        disable_gpg_check: true
        state: present

    - name: Configure hugepagesz
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        state: present
        mode: "0644"
        owner: root
        group: root
        # no_extra_spaces: true
        section: variables
        option: hugepagesz
        value: 1G

    - name: Configure hugepages
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        state: present
        mode: "0644"
        owner: root
        group: root
        # no_extra_spaces: true
        section: variables
        option: hugepages
        value: "{{ hugepages }}"

    - name: Check if instance is AWS EC2
      ansible.builtin.uri:
        url: http://169.254.169.254/latest/api/token
        method: PUT
        headers:
          X-aws-ec2-metadata-token-ttl-seconds: '21600'
        timeout: 2
      register: aws_uri_check
      failed_when: False

    - name: Check if instance is Azure VM
      ansible.builtin.uri:
        url: http://169.254.169.254/metadata/instance?api-version=2021-02-01
        headers:
          Metadata: "true"
        timeout: 2
      register: azure_uri_check
      failed_when: False

    # - name: Show results of AWS URI check
    #   ansible.builtin.debug:
    #     msg: "{{ aws_uri_check }}"

    - name: Set kernel.unknown_nmi_panic = 1 if host is AWS EC2 instance
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        state: present
        mode: "0644"
        owner: root
        group: root
        # no_extra_spaces: true
        section: sysctl
        option: kernel.unknown_nmi_panic
        value: "1"
      when: aws_uri_check.status == 200

    - name: Set kernel.unknown_nmi_panic = 1 if host is AWS EC2 instance or Azure VM
      community.general.ini_file:
        path: /etc/tuned/epic/tuned.conf
        state: present
        mode: "0644"
        owner: root
        group: root
        # no_extra_spaces: true
        section: bootloader
        option: cmdline.4
        value: "nosmt"
      when: aws_uri_check.status == 200 or azure_uri_check.status == 200

    - name: Run tuned-adm profile command
      ansible.builtin.command: /usr/sbin/tuned-adm profile epic
      # register: tunedadm

    # - name: Show results of tuned-adm command
    #   ansible.builtin.debug:
    #     msg: "{{ tunedadm }}"

    - name: Start and enable tuned service
      ansible.builtin.service:
        name: tuned
        state: started
        enabled: true

    - name: Run tuned-adm verify command and reboot to apply changes if it fails
      ansible.builtin.command: /usr/sbin/tuned-adm verify
      failed_when: false
      register: tunedadm_verify

    - name: Reboot when tuned-adm verify fails
      ansible.builtin.reboot:
        msg: "Rebooting to apply tuned configuration changes"
      when: tunedadm_verify.rc != 0
      register: reboot_result
      ignore_errors: true
        
    - name: Run tuned-adm verify command and stop if it fails
      ansible.builtin.command: /usr/sbin/tuned-adm verify
      register: tunedadm_verify
